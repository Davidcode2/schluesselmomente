# nginx.backend.conf
server {
    listen 80; # Listen on port 80 inside the container
    server_name _; # Listen for any hostname

    # Root is technically needed, but explicit location blocks handle routing
    # Set a root that exists but isn't the primary place files are served from directly
    root /var/www/app;

    # === Location for the API endpoint ===
    # Match the specific API URL forwarded by the frontend Nginx
    # Using '=' for an exact match is precise
    location = /api/contact {
        # This location block handles the request and passes it to PHP-FPM

        # Pass the request to the PHP-FPM process running in the same container
        # Use the standard Unix socket path for php-fpm
        #fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; # Check actual socket path if different
        fastcgi_pass 127.0.0.1:9000;

        # Include standard FastCGI parameters required for PHP execution
        include fastcgi_params;

        # *** CRITICAL: Tell PHP-FPM the correct script file to execute ***
        # SCRIPT_FILENAME must be the absolute path to the script inside this container's filesystem
        fastcgi_param SCRIPT_FILENAME /var/www/app/sendMailGun.php;
        # SCRIPT_NAME should be the public facing URL path for the script
        fastcgi_param SCRIPT_NAME /api/contact;

        # Ensure other necessary parameters are passed
        fastcgi_param REQUEST_URI $request_uri; # Pass the original request URI
        # fastcgi_param REQUEST_METHOD $request_method; # Included in fastcgi_params
        # fastcgi_param CONTENT_TYPE $content_type;   # Included in fastcgi_params
        # fastcgi_param CONTENT_LENGTH $content_length; # Included in fastcgi_params

        # Add logging specific to this API endpoint if needed
        # access_log /var/log/nginx/backend_api_access.log combined;
        # error_log /var/log/nginx/backend_api_error.log;
    }

    # Optional: Deny access to any other .php files in the application directory
    # This prevents direct execution of potentially sensitive files if the routing is misconfigured
    location ~ \.php$ {
        # Ensure this is placed carefully if you have other intended PHP locations
        # For a pure API container only serving specific endpoints, denying is safest
        return 404; # Not found, or 403 Forbidden
    }

    # Deny access to the .env file if it's in the application directory
    location = /.env {
        deny all;
    }

     # Deny access to the vendor directory
     location ~ /vendor/ {
         deny all;
     }


    # Default location: return 404 for any other request not explicitly handled above
    # This makes the backend container only respond to the defined API endpoints
    location / {
        return 404; # Not Found
    }

    # Include potential other configuration snippets
    # include /etc/nginx/conf.d/*.conf;
}
